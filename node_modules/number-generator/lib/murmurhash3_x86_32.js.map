{"version":3,"file":"murmurhash3_x86_32.js.map","sources":["../src/_shared.js","../src/murmurhash3_x86_32.js"],"sourcesContent":["/**\n * Returns a multiple unsigned int32\n *\n * @private\n * @param {number} x Non linear base\n * @param {number} y Linear base\n * @return {number} Unsigned int32\n */\nexport function uMul32Getter(x, y) {\n    x = x | 0;\n    y = y | 0;\n    const nonLinear = x & 0xffff;\n    const linearBase = x >>> 16;\n\n    return (nonLinear * y + (((linearBase * y) & 0xffff) << 16)) | 0;\n}\n\n/**\n * Return an unsigned int32 from hash by position\n *\n * @private\n * @param {string} hash String hash value\n * @param {number} position String start position\n * @return {number} Unsigned int32\n */\nexport function uInt32Getter(hash, position) {\n    return (\n        hash.charCodeAt(position++) +\n        (hash.charCodeAt(position++) << 8) +\n        (hash.charCodeAt(position++) << 16) +\n        (hash.charCodeAt(position) << 24)\n    );\n}\n\n/**\n * Throw an error if the given seed is invalid for a murmur hash algorithm\n *\n * @private\n * @param {number} seed A number value representing the seed\n */\nexport function throwInvalidMurmurSeed(seed) {\n    if (seed !== undefined && seed % 1 !== 0) {\n        throw new TypeError('Expected seed to be an integer, float given');\n    }\n}\n\n/**\n * Throw an error if the given seed is invalid for the alea algorithm\n *\n * @private\n * @param {number} seed A number value representing the seed\n */\nexport function throwInvalidAleaSeed(seed) {\n    if (seed % 1 !== 0 || seed <= 0) {\n        throw new TypeError(\n            `Expected seed to be an unsigned integer greater 1, but got \"${seed}\"`\n        );\n    }\n}\n","/** @module number-generator/lib/murmurhash3_x86_32 */\nimport { uMul32Getter, uInt32Getter, throwInvalidMurmurSeed } from './_shared';\n\n/**\n * Generate a non-cryptic number hash with murmur3 algorithm\n *\n * From {@link https://github.com/karanlyons/murmurHash3.js}\n * Karan Lyons, 2014\n * Refactored and extended from Martin Helmut Fieber <info@martin-fieber.de>\n *\n * @export number-generator/lib/murmurhash3_x86_32\n * @throws {TypeError} Throws an exception if seed is a float\n * @param {string} hash The base string hash to generate number\n * @param {number} [seed=0] An optional seed value\n * @return {number} Generated number\n */\nexport default (() => {\n    const MULTIPLIER_1 = 0xcc9e2d51;\n    const MULTIPLIER_2 = 0x1b873593;\n    const MULTIPLIER_3 = 0x85ebca6b;\n    const MULTIPLIER_4 = 0xc2b2ae35;\n\n    const CORRECTION = 0xe6546b64;\n\n    /**\n     * Returns the int32 rotated left by the number of positions\n     *\n     * @param {number} x Unsigned int32\n     * @param {number} y Number representing bit positions\n     * @returns {number}\n     */\n    const uInt32RotateLeft = (x, y) => (x << y) | (x >>> (32 - y));\n\n    /**\n     * Generate a non-cryptic number hash with murmur3 algorithm\n\n     * @throws {TypeError} Throws an exception if seed is a float\n     * @param {string} hash The base string hash to generate number\n     * @param {number} [seed=0] An optional seed value\n     * @return {number} Generated number\n     */\n    function murmurhash3_x86_32(hash, seed = 0) {\n        throwInvalidMurmurSeed(seed);\n\n        const remainder = hash.length % 4;\n        const bytes = hash.length - remainder;\n\n        let calculated = 0;\n        let currentIndex = 0;\n        let hashSum = seed;\n\n        while (currentIndex < bytes) {\n            calculated = uInt32Getter(hash, currentIndex);\n\n            calculated = uMul32Getter(calculated, MULTIPLIER_1);\n            calculated = uInt32RotateLeft(calculated, 15);\n            calculated = uMul32Getter(calculated, MULTIPLIER_2);\n\n            hashSum ^= calculated;\n            hashSum = uInt32RotateLeft(hashSum, 13);\n            hashSum = uMul32Getter(hashSum, 5) + CORRECTION;\n\n            currentIndex += 4;\n        }\n\n        calculated = 0;\n\n        switch (remainder) {\n            case 3:\n                calculated ^= (hash.charCodeAt(currentIndex + 2) & 0xff) << 16;\n            // eslint-disable-next-line no-fallthrough\n            case 2:\n                calculated ^= (hash.charCodeAt(currentIndex + 1) & 0xff) << 8;\n            // eslint-disable-next-line no-fallthrough\n            case 1:\n                calculated ^= hash.charCodeAt(currentIndex) & 0xff;\n                calculated = uMul32Getter(calculated, MULTIPLIER_1);\n                calculated = uInt32RotateLeft(calculated, 15);\n                calculated = uMul32Getter(calculated, MULTIPLIER_2);\n                hashSum ^= calculated;\n        }\n\n        hashSum ^= hash.length;\n        hashSum ^= hashSum >>> 16;\n        hashSum = uMul32Getter(hashSum, MULTIPLIER_3);\n        hashSum ^= hashSum >>> 13;\n        hashSum = uMul32Getter(hashSum, MULTIPLIER_4);\n        hashSum ^= hashSum >>> 16;\n\n        return hashSum >>> 0;\n    }\n\n    return murmurhash3_x86_32;\n})();\n"],"names":["uMul32Getter","x","y","uInt32Getter","hash","position","charCodeAt","throwInvalidMurmurSeed","seed","undefined","TypeError","MULTIPLIER_1","MULTIPLIER_2","MULTIPLIER_3","MULTIPLIER_4","CORRECTION","uInt32RotateLeft","remainder","length","bytes","calculated","currentIndex","hashSum"],"mappings":"aAQO,SAASA,aAAaC,EAAGC,UAGN,OAFtBD,GAAQ,KACRC,GAAQ,MAEWD,IAAM,IAEeC,EAAK,QAAW,IAAO,EAW5D,SAASC,aAAaC,EAAMC,UAE3BD,EAAKE,WAAWD,MACfD,EAAKE,WAAWD,MAAe,IAC/BD,EAAKE,WAAWD,MAAe,KAC/BD,EAAKE,WAAWD,IAAa,IAU/B,SAASE,uBAAuBC,WACtBC,IAATD,GAAsBA,EAAO,GAAM,QAC7B,IAAIE,UAAU,+CC1B5B,uBAAe,eACLC,EAAe,WACfC,EAAe,UACfC,EAAe,WACfC,EAAe,WAEfC,EAAa,WASbC,EAAmB,SAACf,EAAGC,UAAOD,GAAKC,EAAMD,IAAO,GAAKC,mBAU/BE,OAAMI,yDAAO,EACrCD,uBAAuBC,WAEjBS,EAAYb,EAAKc,OAAS,EAC1BC,EAAQf,EAAKc,OAASD,EAExBG,EAAa,EACbC,EAAe,EACfC,EAAUd,EAEPa,EAAeF,GAGlBC,EAAapB,aAFboB,EAAajB,aAAaC,EAAMiB,GAEMV,GAEtCS,EAAapB,aADboB,EAAaJ,EAAiBI,EAAY,IACJR,GAItCU,EAAUtB,aADVsB,EAAUN,EADVM,GAAWF,EACyB,IACJ,GAAKL,EAErCM,GAAgB,SAGpBD,EAAa,EAELH,QACC,EACDG,IAAmD,IAApChB,EAAKE,WAAWe,EAAe,KAAc,QAE3D,EACDD,IAAmD,IAApChB,EAAKE,WAAWe,EAAe,KAAc,OAE3D,EAEDD,EAAapB,aADboB,GAA8C,IAAhChB,EAAKE,WAAWe,GACQV,GAGtCW,GADAF,EAAapB,aADboB,EAAaJ,EAAiBI,EAAY,IACJR,UAI9CU,GAAWlB,EAAKc,OAEhBI,EAAUtB,aADVsB,GAAWA,IAAY,GACST,GAEhCS,EAAUtB,aADVsB,GAAWA,IAAY,GACSR,IAChCQ,GAAWA,IAAY,MAEJ,GAzEZ"}