{"version":3,"file":"index.js.map","sources":["../src/_shared.js","../src/aleaRNGFactory.js","../src/murmurhash2_x86_32.js","../src/murmurhash3_x86_32.js","../src/index.js"],"sourcesContent":["/**\n * Returns a multiple unsigned int32\n *\n * @private\n * @param {number} x Non linear base\n * @param {number} y Linear base\n * @return {number} Unsigned int32\n */\nexport function uMul32Getter(x, y) {\n    x = x | 0;\n    y = y | 0;\n    const nonLinear = x & 0xffff;\n    const linearBase = x >>> 16;\n\n    return (nonLinear * y + (((linearBase * y) & 0xffff) << 16)) | 0;\n}\n\n/**\n * Return an unsigned int32 from hash by position\n *\n * @private\n * @param {string} hash String hash value\n * @param {number} position String start position\n * @return {number} Unsigned int32\n */\nexport function uInt32Getter(hash, position) {\n    return (\n        hash.charCodeAt(position++) +\n        (hash.charCodeAt(position++) << 8) +\n        (hash.charCodeAt(position++) << 16) +\n        (hash.charCodeAt(position) << 24)\n    );\n}\n\n/**\n * Throw an error if the given seed is invalid for a murmur hash algorithm\n *\n * @private\n * @param {number} seed A number value representing the seed\n */\nexport function throwInvalidMurmurSeed(seed) {\n    if (seed !== undefined && seed % 1 !== 0) {\n        throw new TypeError('Expected seed to be an integer, float given');\n    }\n}\n\n/**\n * Throw an error if the given seed is invalid for the alea algorithm\n *\n * @private\n * @param {number} seed A number value representing the seed\n */\nexport function throwInvalidAleaSeed(seed) {\n    if (seed % 1 !== 0 || seed <= 0) {\n        throw new TypeError(\n            `Expected seed to be an unsigned integer greater 1, but got \"${seed}\"`\n        );\n    }\n}\n","/** @module number-generator/lib/aleaRNGFactory */\nimport { throwInvalidAleaSeed } from './_shared';\n\n/**\n * Number generator with Alea algorithm\n *\n * From {@link http://baagoe.com/en/RandomMusings/javascript/}\n * Johannes BaagÃ¸e <baagoe@baagoe.com>, 2010\n * Refactored and extended from Martin Helmut Fieber <info@martin-fieber.de>\n *\n * @export number-generator/lib/aleaRNGFactory\n * @param {number} [initialSeed=1] Optional start seed number\n * @return {NumberGenerator} A number generator object\n */\nexport default (() => {\n    /**\n     * Number generator state\n     *\n     * @global\n     * @namespace NumberGeneratorState\n     * @property {number} correction Alea correction value\n     * @property {number[]} sequence An 3-length array of sequences for generating numbers\n     */\n\n    /**\n     * @global\n     * @namespace NumberGenerator\n     */\n\n    /**\n     * Set a seed for the generator\n     *\n     * @function setSeed\n     * @memberof NumberGenerator\n     * @param {number} seed The start seed to use for number generation\n     * @return {number} Returns the defined seed\n     */\n\n    /**\n     * Get an unsigned 32 bit float\n     *\n     * @function uFloat32\n     * @memberof NumberGenerator\n     * @return {number} Returns an unsigned 32 bit float\n     */\n\n    /**\n     * Get an unsigned 32 bit integer\n     *\n     * @function uInt32\n     * @memberof NumberGenerator\n     * @return {number} Returns an unsigned 32 bit integer\n     */\n\n    /**\n     * Returns the current number generator state\n     *\n     * @function getState\n     * @memberof NumberGenerator\n     * @return {NumberGeneratorState} Returns the internal number generator state\n     */\n\n    /**\n     * Set a new number generator state\n     *\n     * @function setState\n     * @memberof NumberGenerator\n     * @param {NumberGeneratorState} [state={correction: 1, sequence: [0, 0, 0]}] A pre configured state object\n     */\n\n    const CORRECTION_DEFAULT = 1;\n    const START_SEQUENCE_0 = 0;\n    const START_SEQUENCE_1 = 0;\n    const START_SEQUENCE_2 = 0;\n    const FRACTURE_FLOAT = 2 ** -32;\n    const FRACTURE_INT = 2 ** 32;\n    const TERM = 2091639;\n    const MULTIPLIER = 69069;\n\n    /**\n     * Number generator with Alea algorithm\n     *\n     * @param {number} [initialSeed=1] Optional start seed number\n     * @return {NumberGenerator} A number generator object\n     */\n    function aleaRNGFactory(initialSeed) {\n        let correction = CORRECTION_DEFAULT;\n        let sequence0 = START_SEQUENCE_0;\n        let sequence1 = START_SEQUENCE_1;\n        let sequence2 = START_SEQUENCE_2;\n\n        /**\n         * Set the used seed number\n         *\n         * @throws {TypeError} Throws an exception if seed is float or negative\n         * @param {number} seed A number value\n         * @return {number} The used number value\n         */\n        function setSeed(seed) {\n            throwInvalidAleaSeed(seed);\n\n            sequence0 = (seed >>> 0) * FRACTURE_FLOAT;\n            seed = (seed * MULTIPLIER + 1) >>> 0;\n            sequence1 = seed * FRACTURE_FLOAT;\n            seed = (seed * MULTIPLIER + 1) >>> 0;\n            sequence2 = seed * FRACTURE_FLOAT;\n            correction = CORRECTION_DEFAULT;\n\n            return seed;\n        }\n\n        /**\n         * Returns a generated random unsigned float number\n         *\n         * @return {number} Generated number\n         */\n        function uFloat32() {\n            const singleTerm = TERM * sequence0 + correction * FRACTURE_FLOAT;\n            correction = singleTerm | 0;\n            sequence0 = sequence1;\n            sequence1 = sequence2;\n            sequence2 = singleTerm - correction;\n            return sequence2;\n        }\n\n        /**\n         * Returns a generated random unsigned 32 integer\n         *\n         * @return {number} Generated number\n         */\n        function uInt32() {\n            return (uFloat32() * FRACTURE_INT) >>> 0;\n        }\n\n        /**\n         * Get the internal sequence state\n         *\n         * @return {NumberGeneratorState} An object defining the internal state\n         */\n        function getState() {\n            return {\n                correction,\n                sequence: [sequence0, sequence1, sequence2]\n            };\n        }\n\n        /**\n         * Set the internal sequence state\n         *\n         * @param {NumberGeneratorState} [state={correction: 1, sequence: [0, 0, 0]}] An object defining the internal state\n         */\n        function setState(state) {\n            const defaultState = {\n                correction: CORRECTION_DEFAULT,\n                sequence: [START_SEQUENCE_0, START_SEQUENCE_1, START_SEQUENCE_2]\n            };\n\n            state = state || defaultState;\n            state.sequence = state.sequence || [];\n\n            correction = state.correction || CORRECTION_DEFAULT;\n            sequence0 = state.sequence[0] || START_SEQUENCE_0;\n            sequence1 = state.sequence[1] || START_SEQUENCE_1;\n            sequence2 = state.sequence[2] || START_SEQUENCE_2;\n        }\n\n        setSeed(initialSeed === undefined ? 1 : initialSeed);\n\n        return { setSeed, uFloat32, uInt32, getState, setState };\n    }\n\n    return aleaRNGFactory;\n})();\n","/** @module number-generator/lib/murmurhash2_x86_32 */\nimport { uMul32Getter, uInt32Getter, throwInvalidMurmurSeed } from './_shared';\n\n/**\n * Generate a non-cryptic number hash with murmur2 algorithm\n *\n * From {@link https://gist.github.com/raycmorgan/588423}\n * Ray Morgan, 2011\n * Refactored and extended from Martin Helmut Fieber <info@martin-fieber.de>\n *\n * @export number-generator/lib/murmurhash2_x86_32\n * @throws {TypeError} Throws an exception if seed is a float\n * @param {string} hash The base string hash to generate number\n * @param {number} [seed=0] An optional seed value\n * @return {number} Generated number\n */\nexport default (() => {\n    const MULTIPLIER = 0x5bd1e995;\n    const BASE = 24;\n\n    /**\n     * Return an unsigned int16 from hash by position\n     *\n     * @private\n     * @param {string} hash String hash value\n     * @param {number} position String start position\n     * @return {number} Unsigned int16\n     */\n    const uInt16Getter = (hash, position) =>\n        hash.charCodeAt(position++) + (hash.charCodeAt(position) << 8);\n\n    /**\n     * Generate a non-cryptic number hash with murmur2 algorithm\n\n     * @throws {TypeError} Throws an exception if seed is a float\n     * @param {string} hash The base string hash to generate number\n     * @param {number} [seed=0] An optional seed value\n     * @return {number} Generated number\n     */\n    function murmurhash2_x86_32(hash, seed = 0) {\n        throwInvalidMurmurSeed(seed);\n\n        let currentIndex = 0;\n        let hashSum = seed ^ hash.length;\n        let length = hash.length;\n\n        while (length >= 4) {\n            let calculated = uInt32Getter(hash, currentIndex);\n\n            calculated = uMul32Getter(calculated, MULTIPLIER);\n            calculated ^= calculated >>> BASE;\n            calculated = uMul32Getter(calculated, MULTIPLIER);\n\n            hashSum = uMul32Getter(hashSum, MULTIPLIER);\n            hashSum ^= calculated;\n\n            currentIndex += 4;\n            length -= 4;\n        }\n\n        switch (length) {\n            case 3:\n                hashSum ^= uInt16Getter(hash, currentIndex);\n                hashSum ^= hash.charCodeAt(currentIndex + 2) << 16;\n                hashSum = uMul32Getter(hashSum, MULTIPLIER);\n                break;\n            case 2:\n                hashSum ^= uInt16Getter(hash, currentIndex);\n                hashSum = uMul32Getter(hashSum, MULTIPLIER);\n                break;\n            case 1:\n                hashSum ^= hash.charCodeAt(currentIndex);\n                hashSum = uMul32Getter(hashSum, MULTIPLIER);\n                break;\n        }\n\n        hashSum ^= hashSum >>> 13;\n        hashSum = uMul32Getter(hashSum, MULTIPLIER);\n        hashSum ^= hashSum >>> 15;\n\n        return hashSum >>> 0;\n    }\n\n    return murmurhash2_x86_32;\n})();\n","/** @module number-generator/lib/murmurhash3_x86_32 */\nimport { uMul32Getter, uInt32Getter, throwInvalidMurmurSeed } from './_shared';\n\n/**\n * Generate a non-cryptic number hash with murmur3 algorithm\n *\n * From {@link https://github.com/karanlyons/murmurHash3.js}\n * Karan Lyons, 2014\n * Refactored and extended from Martin Helmut Fieber <info@martin-fieber.de>\n *\n * @export number-generator/lib/murmurhash3_x86_32\n * @throws {TypeError} Throws an exception if seed is a float\n * @param {string} hash The base string hash to generate number\n * @param {number} [seed=0] An optional seed value\n * @return {number} Generated number\n */\nexport default (() => {\n    const MULTIPLIER_1 = 0xcc9e2d51;\n    const MULTIPLIER_2 = 0x1b873593;\n    const MULTIPLIER_3 = 0x85ebca6b;\n    const MULTIPLIER_4 = 0xc2b2ae35;\n\n    const CORRECTION = 0xe6546b64;\n\n    /**\n     * Returns the int32 rotated left by the number of positions\n     *\n     * @param {number} x Unsigned int32\n     * @param {number} y Number representing bit positions\n     * @returns {number}\n     */\n    const uInt32RotateLeft = (x, y) => (x << y) | (x >>> (32 - y));\n\n    /**\n     * Generate a non-cryptic number hash with murmur3 algorithm\n\n     * @throws {TypeError} Throws an exception if seed is a float\n     * @param {string} hash The base string hash to generate number\n     * @param {number} [seed=0] An optional seed value\n     * @return {number} Generated number\n     */\n    function murmurhash3_x86_32(hash, seed = 0) {\n        throwInvalidMurmurSeed(seed);\n\n        const remainder = hash.length % 4;\n        const bytes = hash.length - remainder;\n\n        let calculated = 0;\n        let currentIndex = 0;\n        let hashSum = seed;\n\n        while (currentIndex < bytes) {\n            calculated = uInt32Getter(hash, currentIndex);\n\n            calculated = uMul32Getter(calculated, MULTIPLIER_1);\n            calculated = uInt32RotateLeft(calculated, 15);\n            calculated = uMul32Getter(calculated, MULTIPLIER_2);\n\n            hashSum ^= calculated;\n            hashSum = uInt32RotateLeft(hashSum, 13);\n            hashSum = uMul32Getter(hashSum, 5) + CORRECTION;\n\n            currentIndex += 4;\n        }\n\n        calculated = 0;\n\n        switch (remainder) {\n            case 3:\n                calculated ^= (hash.charCodeAt(currentIndex + 2) & 0xff) << 16;\n            // eslint-disable-next-line no-fallthrough\n            case 2:\n                calculated ^= (hash.charCodeAt(currentIndex + 1) & 0xff) << 8;\n            // eslint-disable-next-line no-fallthrough\n            case 1:\n                calculated ^= hash.charCodeAt(currentIndex) & 0xff;\n                calculated = uMul32Getter(calculated, MULTIPLIER_1);\n                calculated = uInt32RotateLeft(calculated, 15);\n                calculated = uMul32Getter(calculated, MULTIPLIER_2);\n                hashSum ^= calculated;\n        }\n\n        hashSum ^= hash.length;\n        hashSum ^= hashSum >>> 16;\n        hashSum = uMul32Getter(hashSum, MULTIPLIER_3);\n        hashSum ^= hashSum >>> 13;\n        hashSum = uMul32Getter(hashSum, MULTIPLIER_4);\n        hashSum ^= hashSum >>> 16;\n\n        return hashSum >>> 0;\n    }\n\n    return murmurhash3_x86_32;\n})();\n","/** @module number-generator */\n'use strict';\n\nimport aleaRNGFactory from './aleaRNGFactory';\nimport murmurhash2_x86_32 from './murmurhash2_x86_32';\nimport murmurhash3_x86_32 from './murmurhash3_x86_32';\n\n// Compatibility to v1\nconst murmurHash = murmurhash2_x86_32;\n\nexport { aleaRNGFactory, murmurhash2_x86_32, murmurHash, murmurhash3_x86_32 };\n"],"names":["uMul32Getter","x","y","uInt32Getter","hash","position","charCodeAt","throwInvalidMurmurSeed","seed","undefined","TypeError","CORRECTION_DEFAULT","START_SEQUENCE_0","START_SEQUENCE_1","START_SEQUENCE_2","FRACTURE_FLOAT","FRACTURE_INT","TERM","MULTIPLIER","initialSeed","correction","sequence0","sequence1","sequence2","setSeed","throwInvalidAleaSeed","uFloat32","singleTerm","uInt32","getState","sequence","setState","state","BASE","uInt16Getter","currentIndex","hashSum","length","calculated","MULTIPLIER_1","MULTIPLIER_2","MULTIPLIER_3","MULTIPLIER_4","CORRECTION","uInt32RotateLeft","remainder","bytes","murmurHash","murmurhash2_x86_32"],"mappings":"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"}