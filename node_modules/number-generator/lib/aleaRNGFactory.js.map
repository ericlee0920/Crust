{"version":3,"file":"aleaRNGFactory.js.map","sources":["../src/_shared.js","../src/aleaRNGFactory.js"],"sourcesContent":["/**\n * Returns a multiple unsigned int32\n *\n * @private\n * @param {number} x Non linear base\n * @param {number} y Linear base\n * @return {number} Unsigned int32\n */\nexport function uMul32Getter(x, y) {\n    x = x | 0;\n    y = y | 0;\n    const nonLinear = x & 0xffff;\n    const linearBase = x >>> 16;\n\n    return (nonLinear * y + (((linearBase * y) & 0xffff) << 16)) | 0;\n}\n\n/**\n * Return an unsigned int32 from hash by position\n *\n * @private\n * @param {string} hash String hash value\n * @param {number} position String start position\n * @return {number} Unsigned int32\n */\nexport function uInt32Getter(hash, position) {\n    return (\n        hash.charCodeAt(position++) +\n        (hash.charCodeAt(position++) << 8) +\n        (hash.charCodeAt(position++) << 16) +\n        (hash.charCodeAt(position) << 24)\n    );\n}\n\n/**\n * Throw an error if the given seed is invalid for a murmur hash algorithm\n *\n * @private\n * @param {number} seed A number value representing the seed\n */\nexport function throwInvalidMurmurSeed(seed) {\n    if (seed !== undefined && seed % 1 !== 0) {\n        throw new TypeError('Expected seed to be an integer, float given');\n    }\n}\n\n/**\n * Throw an error if the given seed is invalid for the alea algorithm\n *\n * @private\n * @param {number} seed A number value representing the seed\n */\nexport function throwInvalidAleaSeed(seed) {\n    if (seed % 1 !== 0 || seed <= 0) {\n        throw new TypeError(\n            `Expected seed to be an unsigned integer greater 1, but got \"${seed}\"`\n        );\n    }\n}\n","/** @module number-generator/lib/aleaRNGFactory */\nimport { throwInvalidAleaSeed } from './_shared';\n\n/**\n * Number generator with Alea algorithm\n *\n * From {@link http://baagoe.com/en/RandomMusings/javascript/}\n * Johannes BaagÃ¸e <baagoe@baagoe.com>, 2010\n * Refactored and extended from Martin Helmut Fieber <info@martin-fieber.de>\n *\n * @export number-generator/lib/aleaRNGFactory\n * @param {number} [initialSeed=1] Optional start seed number\n * @return {NumberGenerator} A number generator object\n */\nexport default (() => {\n    /**\n     * Number generator state\n     *\n     * @global\n     * @namespace NumberGeneratorState\n     * @property {number} correction Alea correction value\n     * @property {number[]} sequence An 3-length array of sequences for generating numbers\n     */\n\n    /**\n     * @global\n     * @namespace NumberGenerator\n     */\n\n    /**\n     * Set a seed for the generator\n     *\n     * @function setSeed\n     * @memberof NumberGenerator\n     * @param {number} seed The start seed to use for number generation\n     * @return {number} Returns the defined seed\n     */\n\n    /**\n     * Get an unsigned 32 bit float\n     *\n     * @function uFloat32\n     * @memberof NumberGenerator\n     * @return {number} Returns an unsigned 32 bit float\n     */\n\n    /**\n     * Get an unsigned 32 bit integer\n     *\n     * @function uInt32\n     * @memberof NumberGenerator\n     * @return {number} Returns an unsigned 32 bit integer\n     */\n\n    /**\n     * Returns the current number generator state\n     *\n     * @function getState\n     * @memberof NumberGenerator\n     * @return {NumberGeneratorState} Returns the internal number generator state\n     */\n\n    /**\n     * Set a new number generator state\n     *\n     * @function setState\n     * @memberof NumberGenerator\n     * @param {NumberGeneratorState} [state={correction: 1, sequence: [0, 0, 0]}] A pre configured state object\n     */\n\n    const CORRECTION_DEFAULT = 1;\n    const START_SEQUENCE_0 = 0;\n    const START_SEQUENCE_1 = 0;\n    const START_SEQUENCE_2 = 0;\n    const FRACTURE_FLOAT = 2 ** -32;\n    const FRACTURE_INT = 2 ** 32;\n    const TERM = 2091639;\n    const MULTIPLIER = 69069;\n\n    /**\n     * Number generator with Alea algorithm\n     *\n     * @param {number} [initialSeed=1] Optional start seed number\n     * @return {NumberGenerator} A number generator object\n     */\n    function aleaRNGFactory(initialSeed) {\n        let correction = CORRECTION_DEFAULT;\n        let sequence0 = START_SEQUENCE_0;\n        let sequence1 = START_SEQUENCE_1;\n        let sequence2 = START_SEQUENCE_2;\n\n        /**\n         * Set the used seed number\n         *\n         * @throws {TypeError} Throws an exception if seed is float or negative\n         * @param {number} seed A number value\n         * @return {number} The used number value\n         */\n        function setSeed(seed) {\n            throwInvalidAleaSeed(seed);\n\n            sequence0 = (seed >>> 0) * FRACTURE_FLOAT;\n            seed = (seed * MULTIPLIER + 1) >>> 0;\n            sequence1 = seed * FRACTURE_FLOAT;\n            seed = (seed * MULTIPLIER + 1) >>> 0;\n            sequence2 = seed * FRACTURE_FLOAT;\n            correction = CORRECTION_DEFAULT;\n\n            return seed;\n        }\n\n        /**\n         * Returns a generated random unsigned float number\n         *\n         * @return {number} Generated number\n         */\n        function uFloat32() {\n            const singleTerm = TERM * sequence0 + correction * FRACTURE_FLOAT;\n            correction = singleTerm | 0;\n            sequence0 = sequence1;\n            sequence1 = sequence2;\n            sequence2 = singleTerm - correction;\n            return sequence2;\n        }\n\n        /**\n         * Returns a generated random unsigned 32 integer\n         *\n         * @return {number} Generated number\n         */\n        function uInt32() {\n            return (uFloat32() * FRACTURE_INT) >>> 0;\n        }\n\n        /**\n         * Get the internal sequence state\n         *\n         * @return {NumberGeneratorState} An object defining the internal state\n         */\n        function getState() {\n            return {\n                correction,\n                sequence: [sequence0, sequence1, sequence2]\n            };\n        }\n\n        /**\n         * Set the internal sequence state\n         *\n         * @param {NumberGeneratorState} [state={correction: 1, sequence: [0, 0, 0]}] An object defining the internal state\n         */\n        function setState(state) {\n            const defaultState = {\n                correction: CORRECTION_DEFAULT,\n                sequence: [START_SEQUENCE_0, START_SEQUENCE_1, START_SEQUENCE_2]\n            };\n\n            state = state || defaultState;\n            state.sequence = state.sequence || [];\n\n            correction = state.correction || CORRECTION_DEFAULT;\n            sequence0 = state.sequence[0] || START_SEQUENCE_0;\n            sequence1 = state.sequence[1] || START_SEQUENCE_1;\n            sequence2 = state.sequence[2] || START_SEQUENCE_2;\n        }\n\n        setSeed(initialSeed === undefined ? 1 : initialSeed);\n\n        return { setSeed, uFloat32, uInt32, getState, setState };\n    }\n\n    return aleaRNGFactory;\n})();\n"],"names":["throwInvalidAleaSeed","seed","TypeError","CORRECTION_DEFAULT","START_SEQUENCE_0","START_SEQUENCE_1","START_SEQUENCE_2","FRACTURE_FLOAT","FRACTURE_INT","TERM","MULTIPLIER","initialSeed","correction","sequence0","sequence1","sequence2","setSeed","uFloat32","singleTerm","undefined","uInt32","getState","sequence","setState","state"],"mappings":"aAoDO,SAASA,qBAAqBC,MAC7BA,EAAO,GAAM,GAAKA,GAAQ,QACpB,IAAIC,gFACyDD,QCzC3E,mBAAe,eAwDLE,EAAqB,EACrBC,EAAmB,EACnBC,EAAmB,EACnBC,EAAmB,EACnBC,WAAiB,GAAM,IACvBC,WAAe,EAAK,IACpBC,EAAO,QACPC,EAAa,sBAQKC,OAChBC,EAAaT,EACbU,EAAYT,EACZU,EAAYT,EACZU,EAAYT,WASPU,EAAQf,UACbD,qBAAqBC,GAErBY,GAAaZ,IAAS,GAAKM,EAE3BO,GADAb,EAAQA,EAAOS,EAAa,IAAO,GAChBH,EAEnBQ,GADAd,EAAQA,EAAOS,EAAa,IAAO,GAChBH,EACnBK,EAAaT,EAENF,WAQFgB,QACCC,EAAaT,EAAOI,EAAYD,EAAaL,SAEnDM,EAAYC,EACZA,EAAYC,EACZA,EAAYG,GAHZN,EAA0B,EAAbM,UAgDjBF,OAAwBG,IAAhBR,EAA4B,EAAIA,GAEjC,CAAEK,QAAAA,EAASC,SAAAA,EAAUG,yBArChBH,IAAaT,IAAkB,GAqCPa,0BA5BzB,CACHT,WAAAA,EACAU,SAAU,CAACT,EAAWC,EAAWC,KA0BKQ,kBAjB5BC,IAMdA,EAAQA,GALa,CACjBZ,WAAYT,EACZmB,SAAU,CAAClB,EAAkBC,EAAkBC,KAI7CgB,SAAWE,EAAMF,UAAY,GAEnCV,EAAaY,EAAMZ,YAAcT,EACjCU,EAAYW,EAAMF,SAAS,IAAMlB,EACjCU,EAAYU,EAAMF,SAAS,IAAMjB,EACjCU,EAAYS,EAAMF,SAAS,IAAMhB,KArJ9B"}